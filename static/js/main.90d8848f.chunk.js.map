{"version":3,"sources":["CountDown.js","App.js","serviceWorker.js","index.js"],"names":["CountDown","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","enabled","minutes","seconds","sound","Audio","load","toggleEnableCountDown","bind","assertThisInitialized","addTime","cleanUp","timerID","clearInterval","_this2","setInterval","decrementTime","_this3","setState","startInterval","timeType","value","newState","newValue","play","newDate","Date","setMilliseconds","getMinutes","getSeconds","_this4","react_default","a","createElement","onClick","e","Component","App","className","src_CountDown","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90d8848f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CountDown extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      enabled: false,\n      minutes: 0,\n      seconds: 0\n    }\n\n    this.sound = new Audio('ROOSTER1.wav');\n    this.sound.load();\n\n    this.toggleEnableCountDown = this.toggleEnableCountDown.bind(this);\n    this.addTime = this.addTime.bind(this);\n  }\n\n  componentWillUnmount() {\n    this.cleanUp();\n  }\n\n  cleanUp() {\n    if (this.timerID) {\n      clearInterval(this.timerID);\n      this.timerID = null;\n    }\n  }\n\n  startInterval() {\n    this.timerID = setInterval(\n      () => this.decrementTime(),\n      1000\n    );\n  }\n\n  toggleEnableCountDown() {\n    this.setState((state, props) => {\n      const enabled = !state.enabled;\n\n      if (enabled){\n        this.startInterval();\n      } else {\n        this.cleanUp();\n      }\n\n      return {enabled: enabled};\n    });\n  }\n\n  addTime(timeType, value) {\n    this.cleanUp();\n\n    this.setState((state, props) => {\n      const newState = {enabled: false};\n      const newValue = state[timeType] + value;\n      if (newValue > -1) {\n        if (newValue > 60) {\n          newState[timeType] = 0;\n        } else {\n          newState[timeType] = newValue;\n        }\n      }\n\n      return newState\n    });\n  }\n\n  decrementTime() {\n    if (this.state.minutes === 0 && this.state.seconds === 0){\n      this.cleanUp();\n      this.setState({enabled: false});\n      this.sound.play();\n      return;\n    }\n\n    this.setState((state, props) => {\n      const newDate = new Date(null, null, null, 0, state.minutes, state.seconds);\n      newDate.setMilliseconds(-1);\n      return {\n        minutes: newDate.getMinutes(),\n        seconds: newDate.getSeconds()\n      }\n    });\n  }\n\n  render() {\n    const minutes = this.state.minutes;\n    const seconds = this.state.seconds;\n\n    return (\n      <div>\n        <div>\n          {minutes}:{seconds}\n        </div>\n        <div>\n          <button onClick={(e) => this.addTime('minutes', 1)}> + </button><button onClick={(e) => this.addTime('minutes', -1)}> - </button>\n          &nbsp;\n          <button onClick={(e) => this.addTime('seconds', 1)}> + </button><button onClick={(e) => this.addTime('seconds', -1)}> - </button>\n        </div>\n        <div>\n          <button onClick={this.toggleEnableCountDown}>{this.state.enabled ? 'Stop' : 'Start'}</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CountDown;\n","import React, { Component } from 'react';\nimport './App.css';\nimport CountDown from './CountDown';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Countdown\n          <CountDown/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}